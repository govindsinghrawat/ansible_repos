---

 - hosts: '{{ server_group }}'
   vars:
     ems_version: 8.5
     threshold: 8388608
     drive: '/app'
     tibco_home: '/app/tibco'
     tibco_backup: '/app/tibco_backups'
     backup_prefix: 'tibco_bkp_ORIG_'
     local_rpm_source: '/home/user/tibco-ansible/rpm/ems-rpm'
     remote_rpm_source: '/app/install/'
     tibco_fid: 'tibuser'
     tibco_gid: 'tibgrp'

   become: yes
   tasks:

   #Check if there is enought space on device
   - name: 'Ensure that free space on {{ mountname }} is grater than 30%  ( > item.size_total|float * 0.3) or 8GB '
     shell: "df --output=avail -k {{ drive }}  | tail -1 | awk '$1 < {{ threshold }}'"
     register: check
     failed_when: check.rc > 0

   - name: "Checking if free space check failed"
     fail:
       msg: "{{ drive }} has {{ check.stdout }} free space. Lower than threshold set of : {{ threshold }}"
     when: check.stdout | length != 0


   #Create variables for backup naming
   - name: 'Take todays date in variable for various backup dirs'
     command: date '+%F'
     register: mydate

   - name: 'Take todays date and time variable for backup dirs suffix'
     command: date '+%Y%m%d%H%M'
     register: suffix

   #Backup existing /opt/tibco dir
   - name: 'Create directory {{ tibco_backup }}/{{ mydate.stdout }} to store already isntalled software backup'
     file: path="{{ tibco_backup }}/{{ mydate.stdout }}" state=directory mode=0750

   - name: "Create backup of {{ tibco_home }} in {{ tibco_backup }}/{{ mydate.stdout }}/{{ backup_prefix }}{{ suffix.stdout }}"
     command: "cp -ar {{ tibco_home }}/. {{ tibco_backup }}/{{ mydate.stdout }}/{{ backup_prefix }}{{ suffix.stdout }}"

   #Check what all ems rpms are installed
   - name: 'Check the latest version of EMS rpm installed.'
     shell: rpm -qa | grep ems
     register: installed_ems
     ignore_errors: yes
     #ignored errors as what if jdk is not installed at all

   #Print the installed ems found
   - name: 'Print each item from installed ems'
     debug:
      var: item
     with_items: '{{ installed_ems.stdout_lines }}'
     when: not installed_ems.stderr


   #Create the directory where you stage the jdk rpm
   - name: 'Ensures {{ remote_rpm_source }} dir exists'
     file: path={{ remote_rpm_source }}  state=directory mode=0755

   #Copy the java rpm
   - name: 'Copy the folder containing all ems rpms to destination server {{ remote_rpm_source }}/{{ mydate.stdout }}/ems-rpm/'
     copy: src={{ local_rpm_source }}  dest="{{ remote_rpm_source }}/{{ mydate.stdout }}" owner=root group=root mode=0750

   #Get the list of jdks in case more than one were copied
   - name: 'Find rpm files which copied over and register the result'
     find:
      paths: "{{ remote_rpm_source }}/{{ mydate.stdout }}/ems-rpm"
      patterns: "*.rpm"
     register: ems_rpm_files

   #Create a list of all rpms to loop through if more than one rpm
   - set_fact:
      ems_rpm_list: "{{ ems_rpm_files.files | map(attribute='path') | list}}"

   #Rpm install the packages
   - name: 'Install rpms'
     shell: rpm -ivh '{{ item }}'
     with_items: '{{ ems_rpm_list }}'

   #Set the permission of newly created directory and files to user:group of choice
   - name: 'Chown the directory {{ tibco_home }}/ems/{{ ems_version }}'
     command: "chown -R {{ tibco_fid }}:{{ tibco_fid }} {{ tibco_home }}/ems/{{ ems_version }}"

   #Cleanup the ems rpm copied to server
   - name: 'Remove directory having EMS rpms {{ remote_rpm_source }}/{{ mydate.stdout }}/ems-rpm'
     file:
      path: "{{ remote_rpm_source }}/{{ mydate.stdout }}/ems-rpm"
      state: absent

   #Set the permission of newly created directory and files to user:group of choice
   #- name: 'Chown the directory /opt/ems/8.5'
   #  command: chown -R tibco:tibco /opt/tibco/ems/8.5
     #command: find /opt/tibco/ems/8.5 -type d -exec chown tibco:tibco {} \;
     #command: find /opt/tibco/ems/8.5 -type f -exec chown tibco:tibco {} \;
     #command: find {{ path }} -type d -exec chmod 0755 {} \;
     #command: find {{ path }} -type f -exec chmod 0644 {} \;
